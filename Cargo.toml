[workspace]
resolver = "2"
members = [
    "engines/robot",
    "framework",
    "framework/common",
    "applications/robot",
    # "libraries/ecs",
    "libraries/ecs-kawogi",
    "runtimes/python",
    "runtimes/python/bindgen",
    "libraries/gltf-model",
    "libraries/geometry",
    "libraries/time",
    "xtask",
    "libraries/file-storage",
]
exclude = ["winit"]

# [workspace.target.'cfg(not(target_os = "windows"))'.features]
# default = ["general_feature"]

# [workspace.target.'cfg(target_os = "windows")'.features]
# default = ["winonly_replacement"]

[workspace.package]
version = "0.1.0"
edition = "2021"
rust-version = "1.81.0"
license-file = "LICENSE-MIT"
readme = "README.md"

[workspace.dependencies]
# workspace-internal crates
engine-robot = { path = "engines/robot" }
gam3du-framework = { path = "framework" }
gam3du-framework-common = { path = "framework/common" }
lib-file-storage = { path = "libraries/file-storage" }
lib-geometry = { path = "libraries/geometry" }
lib-gltf-model = { path = "libraries/gltf-model" }
lib-time = { path = "libraries/time" }
runtime-python = { path = "runtimes/python" }
runtime-python-bindgen = { path = "runtimes/python/bindgen" }

# from crates.io
web-time = "1.1.0"
regex-lite = "0.1.6"
pico-args = { version = "0.5.0", features = [
    "eq-separator",
    "short-space-opt",
    "combined-flags",
] }
xshell = "0.2.6"
reqwest = { version = "0.12.9", features = ["blocking"] }
anyhow = { version = "1.0.92", default-features = false }
bytemuck = { version = "1.19.0", default-features = false }
ctrlc = { version = "3.4.5", default-features = false }
async-std = "1.13.0"
# Generic helper type for iterators and formatting.
# This is dependency is "free" because it is already in our dependency graph:
# `either` is a dependency of `which` and `itertools` which are used by `rustpython-vm`.
# either = "1.13.0"
# tokio = { version = "1.41.0", default-features = false }
# tokio-util = { version = "0.7.12", default-features = false }
# Used to maintain the order of elements in JSON objects.
# This makes the JSON deserialization of the `serde_json` crate deterministic
# which is useful when generating code from the api.json file.
indexmap = { version = "2.5.0", default-features = false, features = ["serde"] }
env_logger = { version = "0.11.5", default-features = false, features = [
    "auto-color",
    "humantime",
] }
glam = { version = "0.29.1", default-features = false, features = ["std"] }
gltf = { version = "1.4.1", default-features = false, features = ["utils"] }
log = { version = "0.4.22", default-features = false }
rand = { version = "0.8.5", default-features = false }
rustpython = { version = "0.4.0", default-features = false }
rustpython-vm = { version = "0.4.0", default-features = false }
serde = { version = "1.0.214", default-features = false }
serde_json = { version = "1.0.132", default-features = false, features = [
    "std",
] }
tiny_http = { version = "0.12.0", default-features = false }
wgpu = { version = "23.0.0", default-features = false }
winit = { git = "https://github.com/rust-windowing/winit.git", rev = "3e9b80d47a9452b72e749a4890db23b92d65abc2", default-features = false }

# wgpu = { version = "23.0.0", default-features = false, features = [
#     "wgsl",
#     "dx12",
# ] }
# winit = { version = "0.30.5", default-features = false, features = [
#     "rwh_06",
#     "x11",
#     "wayland",
# ] }

# winit = { git = "https://github.com/rust-windowing/winit.git", rev = "3e9b80d47a9452b72e749a4890db23b92d65abc2", features = [
#     "default",
# ] }
# wgpu = { version = "23.0.0", features = ["webgl"] }
image = { version = "0.25.0", default-features = false, features = ["png"] }
tracing = { version = "0.1.40", default-features = false, features = ["log"] }
tracing-subscriber = { version = "0.3.18", features = ["env-filter"] }
wasm-bindgen = "*"
web-sys = "*"
pollster = "*"

console_error_panic_hook = "0.1"
tracing-web = "0.1"


# Compile all (non-workspace) dependencies with optimizations.
# https://doc.rust-lang.org/cargo/reference/profiles.html#overrides
[profile.dev.package."*"]
opt-level = 1

[workspace.lints.rust]
# more lints can be found in [lints.clippy]

######################################################################################################################
# Lints that are common to be globally overridden depending on the project's state or type
######################################################################################################################

# Override these lints in your project until you plan to release your project to the public
# They can be very noisy during development
missing_docs = "warn"
dead_code = "warn"

# disable in your project if these report false positives for build-dependencies
unused_crate_dependencies = "warn"

######################################################################################################################
# Maintenance lints that are generally overridden, but can be used temporarily for clean-up and maintenance
######################################################################################################################

# generally too eager and suggests too big datatypes but helps to see whether there are missed opportunities
# missing_copy_implementations = "warn"

######################################################################################################################
# Lints that should only be overridden for a small scope with a comment explaining the exception
######################################################################################################################

absolute_paths_not_starting_with_crate = "warn"
elided_lifetimes_in_paths = "warn"
explicit_outlives_requirements = "warn"
ffi_unwind_calls = "warn"
keyword_idents = { level = "warn", priority = -1 }
let_underscore_drop = "warn"
macro_use_extern_crate = "warn"
meta_variable_misuse = "warn"
missing_abi = "warn"
non_ascii_idents = "warn"
rust_2021_incompatible_closure_captures = "warn"
rust_2021_incompatible_or_patterns = "warn"
rust_2021_prefixes_incompatible_syntax = "warn"
rust_2021_prelude_collisions = "warn"
single_use_lifetimes = "warn"
trivial_casts = "warn"
trivial_numeric_casts = "warn"
unit_bindings = "warn"
unreachable_pub = "warn"
unsafe_code = "warn"
unsafe_op_in_unsafe_fn = "warn"
unstable_features = "warn"
unused_extern_crates = "warn"
unused_import_braces = "warn"
unused_lifetimes = "warn"
unused_macro_rules = "warn"
unused_qualifications = "warn"
variant_size_differences = "warn"

# unstable lints available on nightly only
# fuzzy_provenance_casts = "warn"
# lossy_provenance_casts = "warn"
# multiple_supertrait_upcastable = "warn"
# must_not_suspend = "warn"
# non_exhaustive_omitted_patterns = "warn"
# unnameable_types = "warn"

[workspace.lints.clippy]
# more lints can be found in [lints.rust]
all = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }

# this is often used for public types and simplifies automatic imports
module_name_repetitions = "allow"

######################################################################################################################
# Lints that are common to be globally overridden depending on the project's state or type
######################################################################################################################

# Override these lints in your project until you plan to release your project to the public
# They can be very noisy during development
missing_panics_doc = "warn"
missing_errors_doc = "warn"

# disable these lints until proper error handling has been implemented in your project
unwrap_used = "warn"
panic = "warn"
todo = "warn"
expect_used = "warn"
missing_assert_message = "warn"
unwrap_in_result = "warn"
indexing_slicing = "warn"
panic_in_result_fn = "warn"

# libraries should not write to stdout/stderr in general, but use a proper logging mechanism
# consider disabling these lints while your crate is still in development and for command line application tools
print_stderr = "warn"
print_stdout = "warn"

# these two rule interfere. Fixing the former for tuples yields a warning for the latter
# disable one of those warnings in your project
pattern_type_mismatch = "allow"
needless_borrowed_reference = "warn"

######################################################################################################################
# Maintenance lints that are generally overridden, but can be used temporarily for clean-up and maintenance
######################################################################################################################

# too many false positives but temporarily useful
shadow_unrelated = "warn"

######################################################################################################################
# Lints that should only be overridden for a small scope with a comment explaining the exception
######################################################################################################################

allow-attributes_without_reason = "warn"
absolute_paths = "warn"
alloc_instead_of_core = "warn"
# allow_attributes = "warn"
allow_attributes_without_reason = "warn"
as_underscore = "warn"
assertions_on_result_states = "warn"
clone_on_ref_ptr = "warn"
create_dir = "warn"
dbg_macro = "warn"
decimal_literal_representation = "warn"
default_union_representation = "warn"
deref_by_slicing = "warn"
disallowed_script_idents = "warn"
empty_drop = "warn"
empty_enum_variants_with_brackets = "warn"
empty_structs_with_brackets = "warn"
error_impl_error = "warn"
exit = "warn"
filetype_is_file = "warn"
float_cmp_const = "warn"
fn_to_numeric_cast_any = "warn"
format_push_string = "warn"
get_unwrap = "warn"
host_endian_bytes = "warn"
if_then_some_else_none = "warn"
infinite_loop = "warn"
inline_asm_x86_att_syntax = "warn"
inline_asm_x86_intel_syntax = "warn"
large_include_file = "warn"
let_underscore_must_use = "warn"
let_underscore_untyped = "warn"
lossy_float_literal = "warn"
map_err_ignore = "warn"
mem_forget = "warn"
min_ident_chars = "warn"
mixed_read_write_in_expression = "warn"
mod_module_files = "warn"
modulo_arithmetic = "warn"
multiple_inherent_impl = "warn"
multiple_unsafe_ops_per_block = "warn"
mutex_atomic = "warn"
needless_raw_strings = "warn"
pub_without_shorthand = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
redundant_type_annotations = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_name_method = "warn"
semicolon_inside_block = "warn"
shadow_same = "warn"
single_char_lifetime_names = "warn"
str_to_string = "warn"
string_add = "warn"
string_lit_chars_any = "warn"
string_slice = "warn"
string_to_string = "warn"
suspicious_xor_used_as_pow = "warn"
tests_outside_test_module = "warn"
try_err = "warn"
undocumented_unsafe_blocks = "warn"
unimplemented = "warn"
unnecessary_safety_comment = "warn"
unnecessary_safety_doc = "warn"
unnecessary_self_imports = "warn"
unseparated_literal_suffix = "warn"
verbose_file_reads = "warn"
